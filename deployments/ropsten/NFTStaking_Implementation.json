{
  "address": "0x1a6D506C326586b05bC2823695917496bC674d77",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseRewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardSinceLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardSinceLastUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heroesToken",
      "outputs": [
        {
          "internalType": "contract Collection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftlAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_heroesAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftlToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseRewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setBaseRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNftl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x020ece37b0924276dbad9b44fd72bdd6f51d3dab0a0d9a6eff5fa189081bf948",
  "receipt": {
    "to": null,
    "from": "0x28bB521929108C012bBEC8D36A156Cf9F8e3272c",
    "contractAddress": "0x1a6D506C326586b05bC2823695917496bC674d77",
    "transactionIndex": 3,
    "gasUsed": "1300691",
    "logsBloom": "0x
    "blockHash": "0x2d1db3de8dcb9e78abc0ee54dfce3c561606244d1532b1f20ea811c6b5061f12",
    "transactionHash": "0x020ece37b0924276dbad9b44fd72bdd6f51d3dab0a0d9a6eff5fa189081bf948",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 11564664,
        "transactionHash": "0x020ece37b0924276dbad9b44fd72bdd6f51d3dab0a0d9a6eff5fa189081bf948",
        "address": "0x1a6D506C326586b05bC2823695917496bC674d77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000028bb521929108c012bbec8d36a156cf9f8e3272c"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x2d1db3de8dcb9e78abc0ee54dfce3c561606244d1532b1f20ea811c6b5061f12"
      }
    ],
    "blockNumber": 11564664,
    "cumulativeGasUsed": "1727531",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fbed51acd36c73d2d583f40524c36029",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardSinceLastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroesToken\",\"outputs\":[{\"internalType\":\"contract Collection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftlAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_heroesAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftlToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setBaseRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNftl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRewardSinceLastUpdate(uint256)\":{\"details\":\"return unaccounted reward that is not reflected in the contract state for staked tokens this function returns value that increments each block. For tokens that are not staked it returns 0\",\"params\":{\"_tokenId\":\"index of the token\"},\"returns\":{\"rewardSinceLastUpdate\":\"reward tokens that were accumulated sinceLastUpdate\"}},\"getStake(uint256)\":{\"details\":\"get the individual stake parameters of the user's staked token\",\"params\":{\"_tokenId\":\"token stake index\"},\"returns\":{\"harvestedYield\":\"The part of yield user harvested already\",\"lastUpdateTime\":\"time of start staking\",\"staked\":\"the status of stake\",\"stakerAddress\":\"address of staker\",\"totalYield\":\"entire yield for the stake\"}},\"harvest(uint256)\":{\"details\":\"harvest accumulated rewards. Can be called many times.\",\"params\":{\"_tokenId\":\"Id of the token to be harvested\"}},\"initialize(address,address)\":{\"details\":\"the constructor arguments:\",\"params\":{\"_heroesAddress\":\"address of token - the same accepted for staking\",\"_nftlAddress\":\"address of token - the same used to pay rewards\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseRewardPerSecond(uint256)\":{\"details\":\"set base reward for tokens\",\"params\":{\"_baseRewardPerSecond\":\"base reward in second\"}},\"stake(uint256)\":{\"details\":\"submit the stake\",\"params\":{\"_tokenId\":\"id of hero token\"}},\"start()\":{\"details\":\"start accepting new stakes. Called only by the owner\"},\"stop()\":{\"details\":\"stop accepting new stakes. Called only by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"details\":\"withdraw the user's staked token\",\"params\":{\"_tokenId\":\"id of hero token\"}},\"withdrawNftl(address,uint256)\":{\"details\":\"the owner is able to withdraw excess tokens\",\"params\":{\"_amount\":\"amount of tokens in atto (1e-18) units\",\"_to\":\"address who will receive the funds\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTStaking.sol\":\"NFTStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x3b68fc053bbad44644adcdddff840106591364bbc0879aac5505756b67fab974\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54b0a0b80c447749f769f37fec206cdee23e7466511802191248e95c8250ff9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Collection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Digital art collectible metaverse\\n * @author NFT Legends team\\n **/\\ncontract Collection is ERC721Upgradeable, ERC721EnumerableUpgradeable, AccessControlUpgradeable {\\n    event NameChange(uint256 indexed index, string newName);\\n    event SkillChange(uint256 indexed index, uint256 newSkill);\\n    event DnaChange(uint256 indexed index, uint256 newDna);\\n    event Buy(address indexed _from, uint256 nfts, address referral);\\n\\n    // each token has its own attributes: Name, Skill and DNA\\n    // Name is the symbolic string, that can be changed over time\\n    mapping(uint256 => string) private _tokenName;\\n    // Skill is a numeric value that represents character's experience\\n    mapping(uint256 => uint256) private _tokenSkill;\\n    // DNA is 256-bit map where unique token attributes encoded\\n    mapping(uint256 => uint256) private _tokenDna;\\n\\n    // when sale is active, anyone is able to buy the token\\n    bool public saleActive;\\n\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    // The token purchase price depends on how early you buy the character\\n    // (i.e. sequential number of the purchase)\\n    struct SaleStage {\\n        uint256 startTokensBought;\\n        uint256 endTokensBought;\\n        uint256 weiPerToken;\\n    }\\n\\n    // All the tokens are grouped in batches. Batch is basically IPFS folder (DAG)\\n    // that stores token descriptions and images. It tokenId falls into batch, the\\n    // tokenURI = batch.baseURI + \\\"/\\\" + tokenId.\\n    // All the batches have the same rarity parameter.\\n    struct Batch {\\n        uint256 startBatchTokenId;\\n        uint256 endBatchTokenId;\\n        string baseURI;\\n        uint256 rarity;\\n    }\\n\\n    // Arrays that store configured batches and saleStages\\n    Batch[] internal _batches;\\n    SaleStage[] internal _saleStages;\\n    // Maximum allowed tokenSupply boundary. Can be extended by adding new stages.\\n    uint256 internal _maxTotalSupply;\\n    // Max NFTs that can be bought at once. To avoid gas overspending.\\n    uint256 public maxPurchaseSize;\\n\\n    // If tokenId doesn't match any configured batch, defaultURI parameters are used.\\n    string internal _defaultUri;\\n    uint256 internal _defaultRarity;\\n    string internal _defaultName;\\n    uint256 internal _defaultSkill;\\n    // Roles that can modify individual characteristics\\n    bytes32 public constant NAME_SETTER_ROLE = keccak256(\\\"NAME_SETTER_ROLE\\\");\\n    bytes32 public constant SKILL_SETTER_ROLE = keccak256(\\\"SKILL_SETTER_ROLE\\\");\\n    bytes32 public constant DNA_SETTER_ROLE = keccak256(\\\"DNA_SETTER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // Received funds (native Ether or BNB) get transferred to Vault address\\n    address payable public vault;\\n\\n    function initialize() public initializer {\\n        __ERC721_init(\\\"CyberPunk\\\", \\\"A-12\\\");\\n        __ERC721Enumerable_init();\\n        __AccessControl_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(NAME_SETTER_ROLE, _msgSender());\\n        _setupRole(SKILL_SETTER_ROLE, _msgSender());\\n        _setupRole(DNA_SETTER_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        maxPurchaseSize = 20;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns current `_maxTotalSupply` value.\\n     */\\n    function maxTotalSupply() public view virtual returns (uint256) {\\n        return _maxTotalSupply;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer incl. minting\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        // check maxTotalSupply is not exceeded on mint\\n        if (from == address(0)) {\\n            require(totalSupply() <= _maxTotalSupply, \\\"Collection: maxSupply achieved\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of configured saleStages (tokensale schedule)\\n     * @return current `_saleStages` array length\\n     */\\n    function saleStagesLength() public view returns (uint256) {\\n        return _saleStages.length;\\n    }\\n\\n    /**\\n     * @dev Returns the saleStage by its index\\n     * @param saleStageIndex salestage index in the array\\n     * @return info about sale stage\\n     */\\n    function getSaleStage(uint256 saleStageIndex) public view returns (SaleStage memory) {\\n        require(_saleStages.length > 0, \\\"getSaleStage: no stages\\\");\\n        require(saleStageIndex < _saleStages.length, \\\"Id must be < sale stages length\\\");\\n\\n        return _saleStages[saleStageIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the length of configured batches\\n     * @return current `_batches` array length.\\n     */\\n    function batchesLength() public view returns (uint256) {\\n        return _batches.length;\\n    }\\n\\n    /**\\n     * @dev Returns all the batches\\n     * @return `_batches`.\\n     */\\n    function getBatches() public view returns (Batch[] memory) {\\n        return _batches;\\n    }\\n\\n    /**\\n     * @dev Returns all sale stages\\n     * @return `_saleStages`.\\n     */\\n    function getSaleStages() public view returns (SaleStage[] memory) {\\n        return _saleStages;\\n    }\\n\\n    /**\\n     * @dev Returns the batch by its index in the array\\n     * @param batchIndex batch index\\n     * @return Batch info\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function getBatch(uint256 batchIndex) public view returns (Batch memory) {\\n        require(_batches.length > 0, \\\"getBatch: no batches\\\");\\n        require(batchIndex < _batches.length, \\\"Id must be < batch length\\\");\\n\\n        return _batches[batchIndex];\\n    }\\n\\n    /**\\n     * @dev Return batch by given tokenId\\n     * @param tokenId token id\\n     * @return batch structure\\n     */\\n    function getBatchByToken(uint256 tokenId) public view returns (Batch memory) {\\n        require(_batches.length > 0, \\\"getBatchByToken: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return _batches[i];\\n            }\\n        }\\n        revert(\\\"batch doesn't exist\\\");\\n    }\\n\\n    /**\\n     * @dev IPFS address that stores JSON with token attributes\\n     * Tries to find it by batch first. If token has no batch, returns defaultUri.\\n     * @param tokenId id of the token\\n     * @return string with ipfs address to json with token attribute\\n     * or URI for default token if token doesn`t exist\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_batches.length > 0, \\\"tokenURI: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return string(abi.encodePacked(_batches[i].baseURI, \\\"/\\\", tokenId.toString(), \\\".json\\\"));\\n            }\\n        }\\n        return _defaultUri;\\n    }\\n\\n    /**\\n     * @notice Creates the new batch for given token range\\n     * @param startTokenId index of the first batch token\\n     * @param endTokenId index of the last batch token\\n     * @param baseURI ipfs batch URI\\n     * @param rarity batch rarity\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function addBatch(\\n        uint256 startTokenId,\\n        uint256 endTokenId,\\n        string memory baseURI,\\n        uint256 rarity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _batchesLength = _batches.length;\\n\\n        require(startTokenId <= endTokenId, \\\"startId must be <= than EndId\\\");\\n        if (_batchesLength > 0) {\\n            for (uint256 i; i < _batchesLength; i++) {\\n                // if both bounds are lower or higher than iter batch\\n                if (\\n                    (startTokenId < _batches[i].startBatchTokenId && endTokenId < _batches[i].startBatchTokenId) ||\\n                    (startTokenId > _batches[i].endBatchTokenId && endTokenId > _batches[i].endBatchTokenId)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"batches intersect\\\");\\n                }\\n            }\\n        }\\n\\n        _batches.push(Batch(startTokenId, endTokenId, baseURI, rarity));\\n    }\\n\\n    /**\\n     * @notice Update existing batch by its index\\n     * @param batchIndex the index of the batch to be changed\\n     * @param batchStartId index of the first batch token\\n     * @param batchEndId index of the last batch token\\n     * @param baseURI ipfs batch URI\\n     * @param rarity batch rarity\\n     * Note: batch ids can change over time and reorder as the result of batch removal\\n     */\\n    function setBatch(\\n        uint256 batchIndex,\\n        uint256 batchStartId,\\n        uint256 batchEndId,\\n        string memory baseURI,\\n        uint256 rarity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _batchesLength = _batches.length;\\n        require(_batchesLength > 0, \\\"setBatch: batches is empty\\\");\\n        require(batchStartId <= batchEndId, \\\"startId must be <= than EndId\\\");\\n\\n        for (uint256 i; i < _batchesLength; i++) {\\n            if (i == batchIndex) {\\n                continue;\\n            } else {\\n                // if both bounds are lower or higher than iter batch\\n                if (\\n                    (batchStartId < _batches[i].startBatchTokenId && batchEndId < _batches[i].startBatchTokenId) ||\\n                    (batchStartId > _batches[i].endBatchTokenId && batchEndId > _batches[i].endBatchTokenId)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"batches intersect\\\");\\n                }\\n            }\\n        }\\n\\n        _batches[batchIndex].startBatchTokenId = batchStartId;\\n        _batches[batchIndex].endBatchTokenId = batchEndId;\\n        _batches[batchIndex].baseURI = baseURI;\\n        _batches[batchIndex].rarity = rarity;\\n    }\\n\\n    /**\\n     * @notice Deletes batch by its id. This reorders the index of the token that was last.\\n     * @param batchIndex the index of the batch to be deteted\\n     */\\n    function deleteBatch(uint256 batchIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_batches.length > batchIndex, \\\"index out of batches length\\\");\\n        _batches[batchIndex] = _batches[_batches.length - 1];\\n        _batches.pop();\\n    }\\n\\n    /**\\n     * @notice Add sale stage (i.e. tokensale schedule)\\n     * It takes place at the end of `saleStages array`\\n     * @param startTokensBought index of the first batch token\\n     * @param endTokensBought index of the last batch token\\n     * @param weiPerToken price for token\\n     */\\n    function addSaleStage(\\n        uint256 startTokensBought,\\n        uint256 endTokensBought,\\n        uint256 weiPerToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(startTokensBought <= endTokensBought, \\\"startTokensBought must be <= than endTokensBought\\\");\\n        require(weiPerToken > 0, \\\"weiPerToken must be non-zero\\\");\\n        uint256 _saleStagesLength = _saleStages.length;\\n\\n        if (_saleStagesLength > 0) {\\n            for (uint256 i; i < _saleStagesLength; i++) {\\n                // if both bounds are lower or higher than iter sale stage\\n                if (\\n                    (startTokensBought < _saleStages[i].startTokensBought &&\\n                        endTokensBought < _saleStages[i].startTokensBought) ||\\n                    (startTokensBought > _saleStages[i].endTokensBought &&\\n                        endTokensBought > _saleStages[i].endTokensBought)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"intersection _saleStages\\\");\\n                }\\n            }\\n        }\\n\\n        _saleStages.push(SaleStage(startTokensBought, endTokensBought, weiPerToken));\\n        _maxTotalSupply += endTokensBought - startTokensBought + 1;\\n    }\\n\\n    /**\\n     * @notice Update (rewrite) saleStage properties by index\\n     * @param saleStageId index of the first sale stage token\\n     * @param startTokensBought index of the first batch token\\n     * @param endTokensBought index of the last batch token\\n     * @param weiPerToken price for token\\n     */\\n    function setSaleStage(\\n        uint256 saleStageId,\\n        uint256 startTokensBought,\\n        uint256 endTokensBought,\\n        uint256 weiPerToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 _saleStagesLength = _saleStages.length;\\n        require(_saleStagesLength > 0, \\\"batches is empty\\\");\\n        require(startTokensBought <= endTokensBought, \\\"startId must be <= than EndId\\\");\\n        for (uint256 i; i < _saleStagesLength; i++) {\\n            if (i == saleStageId) {\\n                continue;\\n            } else {\\n                // if both bounds are lower or higher than iter sale stage\\n                if (\\n                    (startTokensBought < _saleStages[i].startTokensBought &&\\n                        endTokensBought < _saleStages[i].startTokensBought) ||\\n                    (startTokensBought > _saleStages[i].endTokensBought &&\\n                        endTokensBought > _saleStages[i].endTokensBought)\\n                ) {\\n                    continue;\\n                } else {\\n                    revert(\\\"intersection _saleStages\\\");\\n                }\\n            }\\n        }\\n        SaleStage memory _saleStage = _saleStages[saleStageId];\\n        _maxTotalSupply =\\n            _maxTotalSupply -\\n            (_saleStage.endTokensBought - _saleStage.startTokensBought + 1) +\\n            (endTokensBought - startTokensBought + 1);\\n\\n        _saleStages[saleStageId].startTokensBought = startTokensBought;\\n        _saleStages[saleStageId].endTokensBought = endTokensBought;\\n        _saleStages[saleStageId].weiPerToken = weiPerToken;\\n    }\\n\\n    /**\\n     * @dev Delete sale stage by the given given index\\n     * @param saleStageIndex index of the batch to be deleted\\n     */\\n    function deleteSaleStage(uint256 saleStageIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_saleStages.length > saleStageIndex, \\\"index out of sale stage length\\\");\\n        SaleStage memory _saleStage = _saleStages[saleStageIndex];\\n        _maxTotalSupply -= _saleStage.endTokensBought - _saleStage.startTokensBought + 1;\\n\\n        _saleStages[saleStageIndex] = _saleStages[_saleStages.length - 1];\\n        _saleStages.pop();\\n    }\\n\\n    /**\\n     * @dev Calculates the total price for the given number of tokens\\n     * @param tokens number of tokens to be purchased\\n     * @return summary price\\n     */\\n    function getTotalPriceFor(uint256 tokens) public view returns (uint256) {\\n        require(tokens > 0, \\\"tokens must be more then 0\\\");\\n\\n        uint256 _saleStagesLength = _saleStages.length;\\n        uint256 totalSupply = totalSupply();\\n        uint256 iterPrice = 0;\\n        uint256 totalPrice = 0;\\n\\n        SaleStage memory saleStage;\\n        for (uint256 tokenIndex = 0; tokenIndex < tokens; tokenIndex++) {\\n            iterPrice = 0;\\n            for (uint256 i = 0; i < _saleStagesLength; i++) {\\n                saleStage = _saleStages[i];\\n                if (totalSupply > saleStage.endTokensBought || totalSupply < saleStage.startTokensBought) continue;\\n                iterPrice += saleStage.weiPerToken;\\n            }\\n            if (iterPrice == 0) {\\n                revert(\\\"saleStage doesn't exist\\\");\\n            }\\n            totalPrice += iterPrice;\\n            totalSupply += 1;\\n        }\\n        return totalPrice;\\n    }\\n\\n    /**\\n     * @dev Method to randomly mint desired number of NFTs\\n     * @param to the address where you want to transfer tokens\\n     * @param nfts the number of tokens to be minted\\n     */\\n    function _mintMultiple(address to, uint256 nfts) internal {\\n        require(totalSupply() < _maxTotalSupply, \\\"Sale has already ended\\\");\\n        require(nfts > 0, \\\"nfts cannot be 0\\\");\\n        require(totalSupply().add(nfts) <= _maxTotalSupply, \\\"Exceeds _maxTotalSupply\\\");\\n\\n        for (uint256 i = 0; i < nfts; i++) {\\n            uint256 mintIndex = _getRandomAvailableIndex();\\n            _safeMint(to, mintIndex);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a specific token (with known id) to the given address\\n     * @param to the receiver\\n     * @param mintIndex the tokenId to mint\\n     */\\n    function mint(address to, uint256 mintIndex) public onlyRole(MINTER_ROLE) {\\n        _safeMint(to, mintIndex);\\n    }\\n\\n    /**\\n     * @dev Public method to randomly mint desired number of NFTs\\n     * @param to the receiver\\n     * @param nfts the number of tokens to be minted\\n     */\\n    function mintMultiple(address to, uint256 nfts) public onlyRole(MINTER_ROLE) {\\n        _mintMultiple(to, nfts);\\n    }\\n\\n    /**\\n     * @dev Method to purchase and random available NFTs.\\n     * @param nfts the number of tokens to buy\\n     * @param referral the address of referral who invited the user to the platform\\n     */\\n    function buy(uint256 nfts, address referral) public payable {\\n        require(saleActive, \\\"Sale is not active\\\");\\n        require(nfts <= maxPurchaseSize, \\\"Can not buy > maxPurchaseSize\\\");\\n        require(getTotalPriceFor(nfts) == msg.value, \\\"Ether value sent is not correct\\\");\\n        emit Buy(msg.sender, nfts, referral);\\n        vault.transfer(msg.value);\\n        _mintMultiple(msg.sender, nfts);\\n    }\\n\\n    /**\\n     * @dev Returns the (pseudo-)random token index free of owner.\\n     * @return available token index\\n     */\\n    function _getRandomAvailableIndex() internal view returns (uint256) {\\n        uint256 index = (uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp, /* solhint-disable not-rely-on-time */\\n                    gasleft(),\\n                    blockhash(block.number - 1)\\n                )\\n            )\\n        ) % _maxTotalSupply);\\n        while (_exists(index)) {\\n            index += 1;\\n            if (index >= _maxTotalSupply) {\\n                index = 0;\\n            }\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * @dev Returns rarity of the NFT by token Id\\n     * @param tokenId id of the token\\n     * @return rarity\\n     */\\n    function getRarity(uint256 tokenId) public view returns (uint256) {\\n        require(_batches.length > 0, \\\"getBatchByToken: no batches\\\");\\n\\n        for (uint256 i; i < _batches.length; i++) {\\n            if (tokenId > _batches[i].endBatchTokenId || tokenId < _batches[i].startBatchTokenId) {\\n                continue;\\n            } else {\\n                return _batches[i].rarity;\\n            }\\n        }\\n        return _defaultRarity;\\n    }\\n\\n    /**\\n     * @dev Returns name of the NFT at index\\n     * @param index token id\\n     * @return NFT name\\n     */\\n    function getName(uint256 index) public view returns (string memory) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        bytes memory _tokenWeight = bytes(_tokenName[index]);\\n        if (_tokenWeight.length == 0) {\\n            return _defaultName;\\n        }\\n        return _tokenName[index];\\n    }\\n\\n    /**\\n     * @dev Returns skill of the NFT at index\\n     * @param index token id\\n     * @return NFT skill\\n     */\\n    function getSkill(uint256 index) public view returns (uint256) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        if (_tokenSkill[index] == 0) {\\n            return _defaultSkill;\\n        }\\n        return _tokenSkill[index];\\n    }\\n\\n    /**\\n     * @dev Returns individual DNA of the NFT at index\\n     * @param index token id\\n     * @return NFT DNA\\n     */\\n    function getDna(uint256 index) public view returns (uint256) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        return _tokenDna[index];\\n    }\\n\\n    /**\\n     * @dev Start tokensale process\\n     */\\n    function start() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(_defaultUri).length > 0, \\\"_defaultUri is undefined\\\");\\n        require(vault != address(0), \\\"Vault is undefined\\\");\\n        saleActive = true;\\n    }\\n\\n    /**\\n     * @dev Stop tokensale\\n     */\\n    function stop() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        saleActive = false;\\n    }\\n\\n    /**\\n     * @dev Set or change individual token name\\n     */\\n    function setName(uint256 index, string memory newName) public onlyRole(NAME_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenName[index] = newName;\\n        emit NameChange(index, newName);\\n    }\\n\\n    /**\\n     * @dev Set or change individual token skill\\n     */\\n    function setSkill(uint256 index, uint256 newSkill) public onlyRole(SKILL_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenSkill[index] = newSkill;\\n        emit SkillChange(index, newSkill);\\n    }\\n\\n    /**\\n     * @dev Set or change individual token DNA\\n     */\\n    function setDna(uint256 index, uint256 newDna) public onlyRole(DNA_SETTER_ROLE) {\\n        require(index < _maxTotalSupply, \\\"index < _maxTotalSupply\\\");\\n        _tokenDna[index] = newDna;\\n        emit DnaChange(index, newDna);\\n    }\\n\\n    /**\\n     * @dev Set max purchase size (to avoid gas overspending)\\n     */\\n    function setMaxPurchaseSize(uint256 newPurchaseSize) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        maxPurchaseSize = newPurchaseSize;\\n    }\\n\\n    /**\\n     * @dev Set defaultUri\\n     */\\n    function setDefaultUri(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultUri = uri;\\n    }\\n\\n    /**\\n     * @dev Set vault\\n     * @param newVault address to receive ethers\\n     */\\n    function setVault(address payable newVault) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vault = newVault;\\n    }\\n\\n    /**\\n     * @dev Set defaultRarity\\n     * @param rarity new default rarity\\n     */\\n    function setDefaultRarity(uint256 rarity) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultRarity = rarity;\\n    }\\n\\n    /**\\n     * @dev Set default name.\\n     * @param name new default name\\n     */\\n    function setDefaultName(string memory name) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultName = name;\\n    }\\n\\n    /**\\n     * @dev Set default skill.\\n     * @param skill new default name\\n     */\\n    function setDefaultSkill(uint256 skill) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _defaultSkill = skill;\\n    }\\n}\\n\",\"keccak256\":\"0x8e5354f55dc0cefd3dc509ce0e6b2df5c65a07f5080c96cebdc60b8f4d69e32a\",\"license\":\"MIT\"},\"contracts/NFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./Collection.sol\\\";\\n\\ncontract NFTStaking is Ownable, ERC721Holder, Initializable {\\n    // user deposits are recorded in StakeInfo[] stakes struct\\n    struct StakeInfo {\\n        // staked is true if token is staked and hasn't been unstaked.\\n        // After user claims his stake back, `staked` becomes false\\n        bool staked;\\n        // address of staked token's owner\\n        address stakerAddress;\\n        // time of start staking token\\n        uint256 lastUpdateTime;\\n        // totalYield is a total value of rewards for the given stake.\\n        // user is able to withdraw yield.\\n        uint256 totalYield;\\n        // The amount of yield user already harvested\\n        uint256 harvestedYield;\\n    }\\n\\n    // If stakesOpen == true, the contract is operational and accepts new stakes.\\n    // Otherwise it allows just harvesting and unstaking.\\n    bool public stakesOpen;\\n\\n    // Token used for rewards\\n    IERC20 public nftlToken;\\n\\n    // The token accepted for staking\\n    Collection public heroesToken;\\n\\n    uint256 internal constant WELCOME_BONUS_TIME = 365 * 24 * 60 * 60;\\n\\n    // struccture that stores the records of users' stakes\\n    mapping(uint256 => StakeInfo) public stakes;\\n    // struccture that stores the records of users' staked tokens\\n    mapping(address => uint256[]) public stakedTokens;\\n\\n    // Base reward that staker will receive for his stake\\n    uint256 public baseRewardPerSecond;\\n\\n    event Stake(address indexed user, uint256 indexed tokenId);\\n    event Unstake(address indexed user, uint256 indexed tokenId);\\n    event Harvest(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _nftlAddress address of token - the same used to pay rewards\\n     * @param _heroesAddress address of token - the same accepted for staking\\n     */\\n    function initialize(address _nftlAddress, address _heroesAddress) public initializer {\\n        require(_nftlAddress != address(0), \\\"Empty NFTL token address\\\");\\n        require(_heroesAddress != address(0), \\\"Empty heroes address\\\");\\n        nftlToken = IERC20(_nftlAddress);\\n        heroesToken = Collection(_heroesAddress);\\n    }\\n\\n    /**\\n     * @dev start accepting new stakes. Called only by the owner\\n     */\\n    function start() public onlyOwner {\\n        require(!stakesOpen, \\\"Stakes are open already\\\");\\n        stakesOpen = true;\\n    }\\n\\n    /**\\n     * @dev stop accepting new stakes. Called only by the owner\\n     */\\n    function stop() public onlyOwner {\\n        require(stakesOpen, \\\"Stakes are stopped already\\\");\\n        stakesOpen = false;\\n    }\\n\\n    /**\\n     * @dev set base reward for tokens\\n     * @param _baseRewardPerSecond  base reward in second\\n     */\\n\\n    function setBaseRewardPerSecond(uint256 _baseRewardPerSecond) public onlyOwner {\\n        require(_baseRewardPerSecond > 0, \\\"Zero reward\\\");\\n        baseRewardPerSecond = _baseRewardPerSecond;\\n    }\\n\\n    /**\\n     * @dev the owner is able to withdraw excess tokens\\n     * @param _to  address who will receive the funds\\n     * @param _amount amount of tokens in atto (1e-18) units\\n     */\\n\\n    function withdrawNftl(address _to, uint256 _amount) public onlyOwner {\\n        require(_to != address(0), \\\"Empty receiver address\\\");\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(nftlToken.balanceOf(address(this)) >= _amount, \\\"Not enough tokens\\\");\\n        nftlToken.transfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev submit the stake\\n     * @param _tokenId id of hero token\\n     */\\n    function stake(uint256 _tokenId) external {\\n        require(stakesOpen, \\\"stake: not open\\\");\\n        stakes[_tokenId].staked = true;\\n        stakes[_tokenId].stakerAddress = msg.sender;\\n        stakes[_tokenId].lastUpdateTime = block.timestamp;\\n\\n        // stakers get welcome bonus for their first stake\\n        if (stakes[_tokenId].totalYield == 0) {\\n            stakes[_tokenId].totalYield = WELCOME_BONUS_TIME * getTokenRewardPerSecond(_tokenId);\\n        }\\n        stakedTokens[msg.sender].push(_tokenId);\\n        emit Stake(msg.sender, _tokenId);\\n        heroesToken.safeTransferFrom(msg.sender, address(this), _tokenId);\\n    }\\n\\n    /**\\n     * @dev withdraw the user's staked token\\n     * @param _tokenId id of hero token\\n     */\\n    function unstake(uint256 _tokenId) external {\\n        require(msg.sender == stakes[_tokenId].stakerAddress, \\\"Sender is not staker\\\");\\n        require(stakes[_tokenId].staked, \\\"Unstaked already\\\");\\n        _updateYield(_tokenId);\\n        stakes[_tokenId].staked = false;\\n        stakes[_tokenId].stakerAddress = address(0);\\n\\n        // Since `delete` Solidity operator leaves zeroes at the deleted index and\\n        // doesn'd decrease array length.\\n        // To actually drop data and shorten the list, we copy last item to the index\\n        // of removed value (overwriting it) then pop last element to decrease array size\\n        for (uint256 i = 0; i < stakedTokens[msg.sender].length; ++i) {\\n            if (stakedTokens[msg.sender][i] == _tokenId) {\\n                uint256 lastElementIndex = stakedTokens[msg.sender].length - 1;\\n                stakedTokens[msg.sender][i] = stakedTokens[msg.sender][lastElementIndex];\\n                stakedTokens[msg.sender].pop();\\n                break;\\n            }\\n        }\\n\\n        emit Unstake(msg.sender, _tokenId);\\n        _calculateAndTransferHarvest(_tokenId);\\n        heroesToken.safeTransferFrom(address(this), msg.sender, _tokenId);\\n    }\\n\\n    /**\\n     * @dev harvest accumulated rewards. Can be called many times.\\n     * @param _tokenId   Id of the token to be harvested\\n     */\\n    function harvest(uint256 _tokenId) external {\\n        address currentTokenHolder = heroesToken.ownerOf(_tokenId);\\n        if (currentTokenHolder == address(this)) {\\n            // token is on staking contract, so we need to check it was indeed staked by msg.sender\\n            require(msg.sender == stakes[_tokenId].stakerAddress, \\\"Sender is not staker\\\");\\n            _updateYield(_tokenId);\\n        } else {\\n            // token is on another address, so we need to check msg.sender is its owner\\n            require(msg.sender == currentTokenHolder, \\\"Sender is not holder\\\");\\n        }\\n\\n        require(stakes[_tokenId].totalYield > stakes[_tokenId].harvestedYield, \\\"No harvestableYield\\\");\\n        _calculateAndTransferHarvest(_tokenId);\\n    }\\n\\n    function getStakedTokens(address _staker) public view returns (uint256[] memory) {\\n        return stakedTokens[_staker];\\n    }\\n\\n    /**\\n     * @dev return unaccounted reward that is not reflected in the contract state\\n     * for staked tokens this function returns value that increments each block.\\n     * For tokens that are not staked it returns 0\\n     * @param _tokenId index of the token\\n     * @return rewardSinceLastUpdate reward tokens that were accumulated sinceLastUpdate\\n     */\\n    function getRewardSinceLastUpdate(uint256 _tokenId) public view returns (uint256 rewardSinceLastUpdate) {\\n        rewardSinceLastUpdate = 0;\\n        if (stakes[_tokenId].staked) {\\n            uint256 secondsStaked = block.timestamp - stakes[_tokenId].lastUpdateTime;\\n            rewardSinceLastUpdate = getTokenRewardPerSecond(_tokenId) * secondsStaked;\\n        }\\n    }\\n\\n    /**\\n     * @dev get the individual stake parameters of the user's staked token\\n     * @param _tokenId token stake index\\n     * @return staked the status of stake\\n     * @return stakerAddress address of staker\\n     * @return lastUpdateTime time of start staking\\n     * @return totalYield entire yield for the stake\\n     * @return harvestedYield The part of yield user harvested already\\n     */\\n    function getStake(uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            bool staked,\\n            address stakerAddress,\\n            uint256 lastUpdateTime,\\n            uint256 totalYield,\\n            uint256 harvestedYield\\n        )\\n    {\\n        StakeInfo memory _stake = stakes[_tokenId];\\n        staked = _stake.staked;\\n        stakerAddress = _stake.stakerAddress;\\n        lastUpdateTime = _stake.lastUpdateTime;\\n        totalYield = _stake.totalYield + getRewardSinceLastUpdate(_tokenId);\\n        harvestedYield = _stake.harvestedYield;\\n    }\\n\\n    function getTokenRewardPerSecond(uint256 _tokenId) public view returns (uint256 rewardPerSecond) {\\n        rewardPerSecond = baseRewardPerSecond * heroesToken.getRarity(_tokenId);\\n    }\\n\\n    // If token is staked, calculate its yield and update its stake parameters (totalYield and time)\\n    function _updateYield(uint256 _tokenId) internal {\\n        require(stakes[_tokenId].staked, \\\"Token not staked\\\");\\n        stakes[_tokenId].totalYield += getRewardSinceLastUpdate(_tokenId);\\n        stakes[_tokenId].lastUpdateTime = block.timestamp;\\n    }\\n\\n    function _calculateAndTransferHarvest(uint256 _tokenId) internal {\\n        uint256 amount = stakes[_tokenId].totalYield - stakes[_tokenId].harvestedYield;\\n        stakes[_tokenId].harvestedYield = stakes[_tokenId].totalYield;\\n        emit Harvest(msg.sender, _tokenId, amount);\\n        nftlToken.transfer(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9a3649eab2d836b5561fde79afe7e9e77e06385f68631099639f87906b73f795\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61161d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063a694fc3a116100b8578063d5a44f861161007c578063d5a44f86146102f5578063d9a7c1f91461033e578063ddc6326214610347578063e81c71271461035a578063f2fde38b1461036d578063fbac4fd71461038057600080fd5b8063a694fc3a1461025e578063acee67c814610271578063be9a655514610284578063cb913c821461028c578063ce325bf8146102b057600080fd5b8063485cc9551161010a578063485cc955146101ec57806363c28db1146101ff578063715018a61461021f5780638da5cb5b1461022757806399d5edf5146102385780639ce6d2461461024b57600080fd5b806307da68f5146101475780630d8753e214610151578063150b7a02146101775780632d58af1d146101ae5780632e17de78146101d9575b600080fd5b61014f610393565b005b61016461015f366004611466565b61042e565b6040519081526020015b60405180910390f35b610195610185366004611338565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161016e565b6002546101c1906001600160a01b031681565b6040516001600160a01b03909116815260200161016e565b61014f6101e7366004611466565b6104be565b61014f6101fa3660046112ff565b61074e565b61021261020d3660046112be565b6108e9565b60405161016e9190611498565b61014f610955565b6000546001600160a01b03166101c1565b610164610246366004611466565b61098b565b61014f610259366004611418565b6109dd565b61014f61026c366004611466565b610bd8565b61014f61027f366004611466565b610d0c565b61014f610d79565b6000546102a090600160b01b900460ff1681565b604051901515815260200161016e565b6102c36102be366004611466565b610e12565b6040805195151586526001600160a01b039094166020860152928401919091526060830152608082015260a00161016e565b6102c3610303366004611466565b6003602081905260009182526040909120805460018201546002830154929093015460ff8216936101009092046001600160a01b0316929085565b61016460055481565b61014f610355366004611466565b610e9d565b610164610368366004611418565b611057565b61014f61037b3660046112be565b611088565b6001546101c1906001600160a01b031681565b6000546001600160a01b031633146103c65760405162461bcd60e51b81526004016103bd906114dc565b60405180910390fd5b600054600160b01b900460ff1661041f5760405162461bcd60e51b815260206004820152601a60248201527f5374616b6573206172652073746f7070656420616c726561647900000000000060448201526064016103bd565b6000805460ff60b01b19169055565b600254604051634875869760e01b8152600481018390526000916001600160a01b03169063487586979060240160206040518083038186803b15801561047357600080fd5b505afa158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab919061147f565b6005546104b89190611529565b92915050565b60008181526003602052604090205461010090046001600160a01b031633146105205760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba1039ba30b5b2b960611b60448201526064016103bd565b60008181526003602052604090205460ff166105715760405162461bcd60e51b815260206004820152601060248201526f556e7374616b656420616c726561647960801b60448201526064016103bd565b61057a81611123565b600081815260036020526040812080546001600160a81b03191690555b336000908152600460205260409020548110156106a9573360009081526004602052604090208054839190839081106105d2576105d26115a6565b9060005260206000200154141561069957336000908152600460205260408120546105ff90600190611548565b33600090815260046020526040902080549192509082908110610624576106246115a6565b600091825260208083209091015433835260049091526040909120805484908110610651576106516115a6565b600091825260208083209091019290925533815260049091526040902080548061067d5761067d611590565b60019003818190600052602060002001600090559055506106a9565b6106a28161155f565b9050610597565b50604051819033907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd90600090a36106e0816111ba565b600254604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b03909116906342842e0e906064015b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505050565b600054600160a81b900460ff16806107705750600054600160a01b900460ff16155b6107d35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103bd565b600054600160a81b900460ff161580156107fd576000805461ffff60a01b191661010160a01b1790555b6001600160a01b0383166108535760405162461bcd60e51b815260206004820152601860248201527f456d707479204e46544c20746f6b656e2061646472657373000000000000000060448201526064016103bd565b6001600160a01b0382166108a05760405162461bcd60e51b8152602060048201526014602482015273456d707479206865726f6573206164647265737360601b60448201526064016103bd565b600180546001600160a01b038086166001600160a01b031992831617909255600280549285169290911691909117905580156108e4576000805460ff60a81b191690555b505050565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561094957602002820191906000526020600020905b815481526020019060010190808311610935575b50505050509050919050565b6000546001600160a01b0316331461097f5760405162461bcd60e51b81526004016103bd906114dc565b610989600061126e565b565b60008181526003602052604081205460ff16156109d8576000828152600360205260408120600101546109be9042611548565b9050806109ca8461042e565b6109d49190611529565b9150505b919050565b6000546001600160a01b03163314610a075760405162461bcd60e51b81526004016103bd906114dc565b6001600160a01b038216610a565760405162461bcd60e51b8152602060048201526016602482015275456d707479207265636569766572206164647265737360501b60448201526064016103bd565b60008111610a945760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016103bd565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f919061147f565b1015610b515760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b60448201526064016103bd565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015610ba057600080fd5b505af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190611444565b600054600160b01b900460ff16610c235760405162461bcd60e51b815260206004820152600f60248201526e39ba30b5b29d103737ba1037b832b760891b60448201526064016103bd565b6000818152600360205260409020805460016001600160a81b031990911661010033021781178255429082015560020154610c8257610c618161042e565b610c6f906301e13380611529565b6000828152600360205260409020600201555b3360008181526004602090815260408083208054600181018255908452918320909101849055518392917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a91a3600254604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401610719565b6000546001600160a01b03163314610d365760405162461bcd60e51b81526004016103bd906114dc565b60008111610d745760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc81c995dd85c9960aa1b60448201526064016103bd565b600555565b6000546001600160a01b03163314610da35760405162461bcd60e51b81526004016103bd906114dc565b600054600160b01b900460ff1615610dfd5760405162461bcd60e51b815260206004820152601760248201527f5374616b657320617265206f70656e20616c726561647900000000000000000060448201526064016103bd565b6000805460ff60b01b1916600160b01b179055565b6000818152600360208181526040808420815160a081018352815460ff811615158083526101009091046001600160a01b0316948201859052600183015493820184905260028301546060830152919094015460808501529391929091908190610e7b8761098b565b8160600151610e8a9190611511565b9250806080015191505091939590929450565b6002546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e9060240160206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a91906112e2565b90506001600160a01b038116301415610f9d5760008281526003602052604090205461010090046001600160a01b03163314610f8f5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba1039ba30b5b2b960611b60448201526064016103bd565b610f9882611123565b610fec565b336001600160a01b03821614610fec5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba103437b63232b960611b60448201526064016103bd565b6000828152600360208190526040909120908101546002909101541161104a5760405162461bcd60e51b8152602060048201526013602482015272139bc81a185c9d995cdd18589b19565a595b19606a1b60448201526064016103bd565b611053826111ba565b5050565b6004602052816000526040600020818154811061107357600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b031633146110b25760405162461bcd60e51b81526004016103bd906114dc565b6001600160a01b0381166111175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103bd565b6111208161126e565b50565b60008181526003602052604090205460ff166111745760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081cdd185ad95960821b60448201526064016103bd565b61117d8161098b565b6000828152600360205260408120600201805490919061119e908490611511565b9091555050600090815260036020526040902042600190910155565b60008181526003602081905260408220908101546002909101546111de9190611548565b600083815260036020819052604091829020600281015491015551909150829033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549061122f9085815260200190565b60405180910390a360015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401610b86565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156112d057600080fd5b81356112db816115d2565b9392505050565b6000602082840312156112f457600080fd5b81516112db816115d2565b6000806040838503121561131257600080fd5b823561131d816115d2565b9150602083013561132d816115d2565b809150509250929050565b6000806000806080858703121561134e57600080fd5b8435611359816115d2565b93506020850135611369816115d2565b925060408501359150606085013567ffffffffffffffff8082111561138d57600080fd5b818701915087601f8301126113a157600080fd5b8135818111156113b3576113b36115bc565b604051601f8201601f19908116603f011681019083821181831017156113db576113db6115bc565b816040528281528a60208487010111156113f457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561142b57600080fd5b8235611436816115d2565b946020939093013593505050565b60006020828403121561145657600080fd5b815180151581146112db57600080fd5b60006020828403121561147857600080fd5b5035919050565b60006020828403121561149157600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156114d0578351835292840192918401916001016114b4565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156115245761152461157a565b500190565b60008160001904831182151516156115435761154361157a565b500290565b60008282101561155a5761155a61157a565b500390565b60006000198214156115735761157361157a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461112057600080fdfea26469706673582212207f96cd42645d034f8b30a70084df0c0d47269968168a5b31e740c862e66b09fd64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063a694fc3a116100b8578063d5a44f861161007c578063d5a44f86146102f5578063d9a7c1f91461033e578063ddc6326214610347578063e81c71271461035a578063f2fde38b1461036d578063fbac4fd71461038057600080fd5b8063a694fc3a1461025e578063acee67c814610271578063be9a655514610284578063cb913c821461028c578063ce325bf8146102b057600080fd5b8063485cc9551161010a578063485cc955146101ec57806363c28db1146101ff578063715018a61461021f5780638da5cb5b1461022757806399d5edf5146102385780639ce6d2461461024b57600080fd5b806307da68f5146101475780630d8753e214610151578063150b7a02146101775780632d58af1d146101ae5780632e17de78146101d9575b600080fd5b61014f610393565b005b61016461015f366004611466565b61042e565b6040519081526020015b60405180910390f35b610195610185366004611338565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161016e565b6002546101c1906001600160a01b031681565b6040516001600160a01b03909116815260200161016e565b61014f6101e7366004611466565b6104be565b61014f6101fa3660046112ff565b61074e565b61021261020d3660046112be565b6108e9565b60405161016e9190611498565b61014f610955565b6000546001600160a01b03166101c1565b610164610246366004611466565b61098b565b61014f610259366004611418565b6109dd565b61014f61026c366004611466565b610bd8565b61014f61027f366004611466565b610d0c565b61014f610d79565b6000546102a090600160b01b900460ff1681565b604051901515815260200161016e565b6102c36102be366004611466565b610e12565b6040805195151586526001600160a01b039094166020860152928401919091526060830152608082015260a00161016e565b6102c3610303366004611466565b6003602081905260009182526040909120805460018201546002830154929093015460ff8216936101009092046001600160a01b0316929085565b61016460055481565b61014f610355366004611466565b610e9d565b610164610368366004611418565b611057565b61014f61037b3660046112be565b611088565b6001546101c1906001600160a01b031681565b6000546001600160a01b031633146103c65760405162461bcd60e51b81526004016103bd906114dc565b60405180910390fd5b600054600160b01b900460ff1661041f5760405162461bcd60e51b815260206004820152601a60248201527f5374616b6573206172652073746f7070656420616c726561647900000000000060448201526064016103bd565b6000805460ff60b01b19169055565b600254604051634875869760e01b8152600481018390526000916001600160a01b03169063487586979060240160206040518083038186803b15801561047357600080fd5b505afa158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab919061147f565b6005546104b89190611529565b92915050565b60008181526003602052604090205461010090046001600160a01b031633146105205760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba1039ba30b5b2b960611b60448201526064016103bd565b60008181526003602052604090205460ff166105715760405162461bcd60e51b815260206004820152601060248201526f556e7374616b656420616c726561647960801b60448201526064016103bd565b61057a81611123565b600081815260036020526040812080546001600160a81b03191690555b336000908152600460205260409020548110156106a9573360009081526004602052604090208054839190839081106105d2576105d26115a6565b9060005260206000200154141561069957336000908152600460205260408120546105ff90600190611548565b33600090815260046020526040902080549192509082908110610624576106246115a6565b600091825260208083209091015433835260049091526040909120805484908110610651576106516115a6565b600091825260208083209091019290925533815260049091526040902080548061067d5761067d611590565b60019003818190600052602060002001600090559055506106a9565b6106a28161155f565b9050610597565b50604051819033907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd90600090a36106e0816111ba565b600254604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b03909116906342842e0e906064015b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505050565b600054600160a81b900460ff16806107705750600054600160a01b900460ff16155b6107d35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103bd565b600054600160a81b900460ff161580156107fd576000805461ffff60a01b191661010160a01b1790555b6001600160a01b0383166108535760405162461bcd60e51b815260206004820152601860248201527f456d707479204e46544c20746f6b656e2061646472657373000000000000000060448201526064016103bd565b6001600160a01b0382166108a05760405162461bcd60e51b8152602060048201526014602482015273456d707479206865726f6573206164647265737360601b60448201526064016103bd565b600180546001600160a01b038086166001600160a01b031992831617909255600280549285169290911691909117905580156108e4576000805460ff60a81b191690555b505050565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561094957602002820191906000526020600020905b815481526020019060010190808311610935575b50505050509050919050565b6000546001600160a01b0316331461097f5760405162461bcd60e51b81526004016103bd906114dc565b610989600061126e565b565b60008181526003602052604081205460ff16156109d8576000828152600360205260408120600101546109be9042611548565b9050806109ca8461042e565b6109d49190611529565b9150505b919050565b6000546001600160a01b03163314610a075760405162461bcd60e51b81526004016103bd906114dc565b6001600160a01b038216610a565760405162461bcd60e51b8152602060048201526016602482015275456d707479207265636569766572206164647265737360501b60448201526064016103bd565b60008111610a945760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016103bd565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f919061147f565b1015610b515760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b60448201526064016103bd565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015610ba057600080fd5b505af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190611444565b600054600160b01b900460ff16610c235760405162461bcd60e51b815260206004820152600f60248201526e39ba30b5b29d103737ba1037b832b760891b60448201526064016103bd565b6000818152600360205260409020805460016001600160a81b031990911661010033021781178255429082015560020154610c8257610c618161042e565b610c6f906301e13380611529565b6000828152600360205260409020600201555b3360008181526004602090815260408083208054600181018255908452918320909101849055518392917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a91a3600254604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401610719565b6000546001600160a01b03163314610d365760405162461bcd60e51b81526004016103bd906114dc565b60008111610d745760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc81c995dd85c9960aa1b60448201526064016103bd565b600555565b6000546001600160a01b03163314610da35760405162461bcd60e51b81526004016103bd906114dc565b600054600160b01b900460ff1615610dfd5760405162461bcd60e51b815260206004820152601760248201527f5374616b657320617265206f70656e20616c726561647900000000000000000060448201526064016103bd565b6000805460ff60b01b1916600160b01b179055565b6000818152600360208181526040808420815160a081018352815460ff811615158083526101009091046001600160a01b0316948201859052600183015493820184905260028301546060830152919094015460808501529391929091908190610e7b8761098b565b8160600151610e8a9190611511565b9250806080015191505091939590929450565b6002546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e9060240160206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a91906112e2565b90506001600160a01b038116301415610f9d5760008281526003602052604090205461010090046001600160a01b03163314610f8f5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba1039ba30b5b2b960611b60448201526064016103bd565b610f9882611123565b610fec565b336001600160a01b03821614610fec5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b91034b9903737ba103437b63232b960611b60448201526064016103bd565b6000828152600360208190526040909120908101546002909101541161104a5760405162461bcd60e51b8152602060048201526013602482015272139bc81a185c9d995cdd18589b19565a595b19606a1b60448201526064016103bd565b611053826111ba565b5050565b6004602052816000526040600020818154811061107357600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b031633146110b25760405162461bcd60e51b81526004016103bd906114dc565b6001600160a01b0381166111175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103bd565b6111208161126e565b50565b60008181526003602052604090205460ff166111745760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081cdd185ad95960821b60448201526064016103bd565b61117d8161098b565b6000828152600360205260408120600201805490919061119e908490611511565b9091555050600090815260036020526040902042600190910155565b60008181526003602081905260408220908101546002909101546111de9190611548565b600083815260036020819052604091829020600281015491015551909150829033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549061122f9085815260200190565b60405180910390a360015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401610b86565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156112d057600080fd5b81356112db816115d2565b9392505050565b6000602082840312156112f457600080fd5b81516112db816115d2565b6000806040838503121561131257600080fd5b823561131d816115d2565b9150602083013561132d816115d2565b809150509250929050565b6000806000806080858703121561134e57600080fd5b8435611359816115d2565b93506020850135611369816115d2565b925060408501359150606085013567ffffffffffffffff8082111561138d57600080fd5b818701915087601f8301126113a157600080fd5b8135818111156113b3576113b36115bc565b604051601f8201601f19908116603f011681019083821181831017156113db576113db6115bc565b816040528281528a60208487010111156113f457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561142b57600080fd5b8235611436816115d2565b946020939093013593505050565b60006020828403121561145657600080fd5b815180151581146112db57600080fd5b60006020828403121561147857600080fd5b5035919050565b60006020828403121561149157600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156114d0578351835292840192918401916001016114b4565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156115245761152461157a565b500190565b60008160001904831182151516156115435761154361157a565b500290565b60008282101561155a5761155a61157a565b500390565b60006000198214156115735761157361157a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461112057600080fdfea26469706673582212207f96cd42645d034f8b30a70084df0c0d47269968168a5b31e740c862e66b09fd64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRewardSinceLastUpdate(uint256)": {
        "details": "return unaccounted reward that is not reflected in the contract state for staked tokens this function returns value that increments each block. For tokens that are not staked it returns 0",
        "params": {
          "_tokenId": "index of the token"
        },
        "returns": {
          "rewardSinceLastUpdate": "reward tokens that were accumulated sinceLastUpdate"
        }
      },
      "getStake(uint256)": {
        "details": "get the individual stake parameters of the user's staked token",
        "params": {
          "_tokenId": "token stake index"
        },
        "returns": {
          "harvestedYield": "The part of yield user harvested already",
          "lastUpdateTime": "time of start staking",
          "staked": "the status of stake",
          "stakerAddress": "address of staker",
          "totalYield": "entire yield for the stake"
        }
      },
      "harvest(uint256)": {
        "details": "harvest accumulated rewards. Can be called many times.",
        "params": {
          "_tokenId": "Id of the token to be harvested"
        }
      },
      "initialize(address,address)": {
        "details": "the constructor arguments:",
        "params": {
          "_heroesAddress": "address of token - the same accepted for staking",
          "_nftlAddress": "address of token - the same used to pay rewards"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseRewardPerSecond(uint256)": {
        "details": "set base reward for tokens",
        "params": {
          "_baseRewardPerSecond": "base reward in second"
        }
      },
      "stake(uint256)": {
        "details": "submit the stake",
        "params": {
          "_tokenId": "id of hero token"
        }
      },
      "start()": {
        "details": "start accepting new stakes. Called only by the owner"
      },
      "stop()": {
        "details": "stop accepting new stakes. Called only by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "details": "withdraw the user's staked token",
        "params": {
          "_tokenId": "id of hero token"
        }
      },
      "withdrawNftl(address,uint256)": {
        "details": "the owner is able to withdraw excess tokens",
        "params": {
          "_amount": "amount of tokens in atto (1e-18) units",
          "_to": "address who will receive the funds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2415,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 413,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5421,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "stakesOpen",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5424,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "nftlToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3135"
      },
      {
        "astId": 5427,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "heroesToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Collection)5395"
      },
      {
        "astId": 5441,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(StakeInfo)5419_storage)"
      },
      {
        "astId": 5446,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "stakedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5448,
        "contract": "contracts/NFTStaking.sol:NFTStaking",
        "label": "baseRewardPerSecond",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Collection)5395": {
        "encoding": "inplace",
        "label": "contract Collection",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3135": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(StakeInfo)5419_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTStaking.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)5419_storage"
      },
      "t_struct(StakeInfo)5419_storage": {
        "encoding": "inplace",
        "label": "struct NFTStaking.StakeInfo",
        "members": [
          {
            "astId": 5410,
            "contract": "contracts/NFTStaking.sol:NFTStaking",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5412,
            "contract": "contracts/NFTStaking.sol:NFTStaking",
            "label": "stakerAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5414,
            "contract": "contracts/NFTStaking.sol:NFTStaking",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5416,
            "contract": "contracts/NFTStaking.sol:NFTStaking",
            "label": "totalYield",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5418,
            "contract": "contracts/NFTStaking.sol:NFTStaking",
            "label": "harvestedYield",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}